// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	id,
	email,
	hashed_password,
	created_at,
	updated_at
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5
) RETURNING id, created_at, email
`

type CreateUserParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

type CreateUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	Email     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Email)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, hashed_password, updated_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
	UpdatedAt      time.Time
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.UpdatedAt,
	)
	return i, err
}

const reset = `-- name: Reset :exec
DELETE FROM users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}
