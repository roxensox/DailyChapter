// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: books.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
	id,
	created_at,
	updated_at,
	title,
	pub_date
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5
) RETURNING id, created_at, updated_at, title, pub_date
`

type CreateBookParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Title     string
	PubDate   sql.NullTime
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.PubDate,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.PubDate,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT title, pub_date
FROM books
`

type GetBooksRow struct {
	Title   string
	PubDate sql.NullTime
}

func (q *Queries) GetBooks(ctx context.Context) ([]GetBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksRow
	for rows.Next() {
		var i GetBooksRow
		if err := rows.Scan(&i.Title, &i.PubDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetBooks = `-- name: ResetBooks :exec
DELETE FROM books
`

func (q *Queries) ResetBooks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetBooks)
	return err
}
