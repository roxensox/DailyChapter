// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refreshtokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkRefreshToken = `-- name: CheckRefreshToken :one
SELECT user_id 
FROM refreshtokens
WHERE 
	token = $1 AND 
	revoked_at = NULL AND
	valid_until > NOW()
`

func (q *Queries) CheckRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, checkRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refreshtokens (
	id,
	created_at,
	updated_at,
	token,
	user_id,
	valid_until,
	revoked_at
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7
) RETURNING token
`

type CreateRefreshTokenParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Token      string
	UserID     uuid.UUID
	ValidUntil time.Time
	RevokedAt  sql.NullTime
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Token,
		arg.UserID,
		arg.ValidUntil,
		arg.RevokedAt,
	)
	var token string
	err := row.Scan(&token)
	return token, err
}

const expireRefreshToken = `-- name: ExpireRefreshToken :exec
UPDATE refreshtokens
SET	revoked_at = NOW(),
	updated_at = NOW()
WHERE token = $1
`

func (q *Queries) ExpireRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, expireRefreshToken, token)
	return err
}
